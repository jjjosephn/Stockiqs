// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customers {
  customerId    String  @id
  phoneNumber   String
  name          String
  instagram     String?
  streetAddress String?
  city          String?
  state         String?
  zipCode       String?
  Sales         Sales[]
}

model Products {
  productId String         @id @default(uuid())
  name      String
  image     String?
  stock     ProductStock[]
  psArchive PSArchive[]
}

model ProductsArchive {
  productsArchiveId String      @id @default(uuid())
  productId         String
  name              String
  timestamp         DateTime    @default(now())
  psArchive         PSArchive[]
  Sales             Sales[]
}

model ProductStock {
  stockId   String      @id @default(uuid())
  price     Float
  productId String
  size      Float
  quantity  Int
  product   Products    @relation(fields: [productId], references: [productId])
  Sales     Sales[]
  Purchases Purchases[]
}

model PSArchive {
  archiveId         String           @id @default(uuid())
  stockId           String
  price             Float
  productId         String?
  productsArchiveId String?
  size              Float
  quantity          Int
  timestamp         DateTime         @default(now())
  product           Products?        @relation(fields: [productId], references: [productId])
  Sales             Sales[]
  Purchases         Purchases[]
  ProductsArchive   ProductsArchive? @relation(fields: [productsArchiveId], references: [productsArchiveId])
}

model Sales {
  saleId            String           @id
  stockId           String?
  archiveId         String?
  customerId        String
  productsArchiveId String?
  timestamp         DateTime
  quantity          Int
  salesPrice        Float
  customers         Customers        @relation(fields: [customerId], references: [customerId])
  productStock      ProductStock?    @relation(fields: [stockId], references: [stockId])
  psArchive         PSArchive?       @relation(fields: [archiveId], references: [archiveId])
  productsArchive   ProductsArchive? @relation(fields: [productsArchiveId], references: [productsArchiveId])
}

model Purchases {
  purchaseId   String        @id @default(uuid())
  stockId      String?
  archiveId    String?
  timestamp    DateTime      @default(now())
  productStock ProductStock? @relation(fields: [stockId], references: [stockId])
  psArchive    PSArchive?    @relation(fields: [archiveId], references: [archiveId])
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  date                DateTime
  category            String
  amount              BigInt
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}
